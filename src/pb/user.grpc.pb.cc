// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: pb/user.proto

#include "user.pb.h"
#include "user.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace pb {

static const char* UserService_method_names[] = {
  "/pb.UserService/UpdateAvatar",
  "/pb.UserService/UpdateProfile",
  "/pb.UserService/GetUser",
};

std::unique_ptr< UserService::Stub> UserService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< UserService::Stub> stub(new UserService::Stub(channel, options));
  return stub;
}

UserService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_UpdateAvatar_(UserService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateProfile_(UserService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetUser_(UserService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status UserService::Stub::UpdateAvatar(::grpc::ClientContext* context, const ::pb::Avatar& request, ::pb::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::pb::Avatar, ::pb::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateAvatar_, context, request, response);
}

void UserService::Stub::async::UpdateAvatar(::grpc::ClientContext* context, const ::pb::Avatar* request, ::pb::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::pb::Avatar, ::pb::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateAvatar_, context, request, response, std::move(f));
}

void UserService::Stub::async::UpdateAvatar(::grpc::ClientContext* context, const ::pb::Avatar* request, ::pb::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateAvatar_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::pb::Empty>* UserService::Stub::PrepareAsyncUpdateAvatarRaw(::grpc::ClientContext* context, const ::pb::Avatar& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::pb::Empty, ::pb::Avatar, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateAvatar_, context, request);
}

::grpc::ClientAsyncResponseReader< ::pb::Empty>* UserService::Stub::AsyncUpdateAvatarRaw(::grpc::ClientContext* context, const ::pb::Avatar& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateAvatarRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UserService::Stub::UpdateProfile(::grpc::ClientContext* context, const ::pb::Profile& request, ::pb::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::pb::Profile, ::pb::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateProfile_, context, request, response);
}

void UserService::Stub::async::UpdateProfile(::grpc::ClientContext* context, const ::pb::Profile* request, ::pb::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::pb::Profile, ::pb::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateProfile_, context, request, response, std::move(f));
}

void UserService::Stub::async::UpdateProfile(::grpc::ClientContext* context, const ::pb::Profile* request, ::pb::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateProfile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::pb::Empty>* UserService::Stub::PrepareAsyncUpdateProfileRaw(::grpc::ClientContext* context, const ::pb::Profile& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::pb::Empty, ::pb::Profile, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateProfile_, context, request);
}

::grpc::ClientAsyncResponseReader< ::pb::Empty>* UserService::Stub::AsyncUpdateProfileRaw(::grpc::ClientContext* context, const ::pb::Profile& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateProfileRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UserService::Stub::GetUser(::grpc::ClientContext* context, const ::pb::ID& request, ::pb::User* response) {
  return ::grpc::internal::BlockingUnaryCall< ::pb::ID, ::pb::User, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetUser_, context, request, response);
}

void UserService::Stub::async::GetUser(::grpc::ClientContext* context, const ::pb::ID* request, ::pb::User* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::pb::ID, ::pb::User, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetUser_, context, request, response, std::move(f));
}

void UserService::Stub::async::GetUser(::grpc::ClientContext* context, const ::pb::ID* request, ::pb::User* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::pb::User>* UserService::Stub::PrepareAsyncGetUserRaw(::grpc::ClientContext* context, const ::pb::ID& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::pb::User, ::pb::ID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::pb::User>* UserService::Stub::AsyncGetUserRaw(::grpc::ClientContext* context, const ::pb::ID& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

UserService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::pb::Avatar, ::pb::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UserService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::pb::Avatar* req,
             ::pb::Empty* resp) {
               return service->UpdateAvatar(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::pb::Profile, ::pb::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UserService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::pb::Profile* req,
             ::pb::Empty* resp) {
               return service->UpdateProfile(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::pb::ID, ::pb::User, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UserService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::pb::ID* req,
             ::pb::User* resp) {
               return service->GetUser(ctx, req, resp);
             }, this)));
}

UserService::Service::~Service() {
}

::grpc::Status UserService::Service::UpdateAvatar(::grpc::ServerContext* context, const ::pb::Avatar* request, ::pb::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserService::Service::UpdateProfile(::grpc::ServerContext* context, const ::pb::Profile* request, ::pb::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserService::Service::GetUser(::grpc::ServerContext* context, const ::pb::ID* request, ::pb::User* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace pb

